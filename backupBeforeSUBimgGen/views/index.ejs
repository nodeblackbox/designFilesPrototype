<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ForgeAI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      .glass-effect {
        @apply bg-white/10 backdrop-blur-lg border border-gray-200/25;
      }
    </style>
  </head>w
  <body class="bg-gray-900 text-white">
    <nav class="bg-orange-500 p-4 text-white flex justify-between items-center">
      <div class="logo">
        <a href="/" class="text-xl font-bold">
          <span class="text-white">ForgeAI</span>
        </a>
      </div>
      <div class="nav-links flex gap-4">
        <a
          href="/gallery"
          class="hover:bg-orange-700 px-3 py-2 rounded transition-colors duration-300"
          >Gallery</a
        >
        <a
          href="/dashboard"
          class="hover:bg-orange-700 px-3 py-2 rounded transition-colors duration-300"
          >Generate</a
        >
        <a
          href="/plans"
          class="hover:bg-orange-700 px-3 py-2 rounded transition-colors duration-300"
          >Pricing</a
        >
        <a
          href="/about"
          class="hover:bg-orange-700 px-3 py-2 rounded transition-colors duration-300"
          >Pricing</a
        >
        <a
          href="/login"
          class="hover:bg-orange-700 px-3 py-2 rounded transition-colors duration-300"
          >Login</a
        >
        <a
          href="/get-started"
          class="bg-black hover:bg-gray-900 px-3 py-2 rounded transition-colors duration-300"
          >Get Started</a
        >
      </div>
    </nav>

    <div class="flex flex-col items-center justify-start pt-16 pb-10 px-6">
      <h2 class="mb-4 text-3xl md:text-4xl font-bold text-center">
        Explore AI-Generated Imagery
      </h2>
      <div class="w-full max-w-4xl flex flex-wrap items-center gap-4">
        <div class="flex-grow relative">
          <input
            type="search"
            placeholder="What are you looking for?"
            class="w-full px-6 py-4 pl-12 glass-effect rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500/50"
          />
          <svg
            class="w-8 h-8 absolute top-4 left-4 text-gray-300"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path d="M19 19l-3.5-3.5"></path>
            <circle cx="11" cy="11" r="6"></circle>
          </svg>
        </div>
        <button
          class="glass-effect px-8 py-3 rounded-full font-semibold hover:bg-blue-500/20 transition-colors"
        >
          Generate
        </button>
      </div>
    </div>
    <!-- Placeholder for Image Gallery -->
    <div class="container mx-auto px-6">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Dynamic images will be inserted here -->
      </div>
    </div>
    <div id="gallery" class="container mx-auto px-6 py-12">
      <!-- Gallery items will be appended here -->
    </div>

    <script>
      // Tailwind CSS customization for the glass effect
      tailwind.config = {
        theme: {
          extend: {
            backgroundImage: (theme) => ({
              "glass-texture": ""
            })
          }
        }
      };
      document.addEventListener("DOMContentLoaded", () => {
        loadGalleryItems(); // Initial load
      });

      let isLoading = false;
      let startIndex = 0;
      const count = 20; // Number of items to load per request

      function loadGalleryItems() {
        if (isLoading) return;
        isLoading = true;

        fetch(`/api/gallery?start=${startIndex}&count=${count}`)
          .then((response) => response.json())
          .then((data) => {
            appendGalleryItems(data.items);
            startIndex += data.items.length;
            isLoading = false;

            // Check if there are more items to load
            if (data.hasMore) {
              createObserver(); // Call the observer to wait for scrolling
            }
          })
          .catch((error) => {
            console.error("Error while loading gallery items:", error);
            isLoading = false;
          });
      }

      function appendGalleryItems(items) {
        const galleryContainer = document.getElementById("gallery");
        items.forEach((item) => {
          const galleryItem = document.createElement("div");
          galleryItem.className = "gallery-item p-4";
          galleryItem.innerHTML = `
      <div class="max-w-sm rounded overflow-hidden shadow-lg">
        <img class="w-full" src="${item.carousel_images[0]}" alt="Gallery image">
        <div class="px-6 py-4">
          <p class="text-gray-700 text-base">${item.description}</p>
        </div>
      </div>
    `;
          galleryContainer.appendChild(galleryItem);
        });
      }

      function createObserver() {
        let observer;
        let lastItem = document.querySelector(".gallery-item:last-child");
        if (!lastItem) return;

        let options = {
          root: null,
          rootMargin: "20px",
          threshold: 1.0
        };

        observer = new IntersectionObserver(handleIntersect, options);
        observer.observe(lastItem);
      }

      function handleIntersect(entries, observer) {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            loadGalleryItems();
            observer.unobserve(entry.target);
          }
        });
      }
    </script>
  </body>
</html>
