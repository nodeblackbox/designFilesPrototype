<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ForgeAI</title>
    <script src="https://cdn.tailwindcss.com"></script>

    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap"
      rel="stylesheet"
    />

    <style>
      /* Custom Styles */
      body {
        font-family: "Roboto", sans-serif;
        background-color: #1e2964;
      }
      .nav-con {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),
          0 1px 3px rgba(0, 0, 0, 0.08);
      }
      .navigation-bar {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        /* Ensures nav bar is above other elements */
        /* Your existing styles for nav */
      }

      .main-container {
        margin-top: 70px; /* Adjust this value based on the height of your nav bar */
        /* Rest of your styles for main-container */
      }
      .glass-effect {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11),
          0 1px 3px rgba(0, 0, 0, 0.08);
      }
      nav {
        background: linear-gradient(
          90deg,
          rgba(33, 150, 243, 0.1) 0%,
          rgba(3, 169, 244, 0.1) 100%
        );
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        /*round*/
        border-radius: 20px;
      }
      .nav-links a {
        transition: background-color 0.3s ease, transform 0.3s ease;
      }
      .nav-links a:hover {
        background-color: rgba(255, 255, 255, 0.1);
        transform: translateY(-2px);
      }
      .rounded-button {
        border-radius: 50px; /* Capsule shape */
        padding: 10px 25px;
      }
      h2 {
        color: #333;
        font-size: 28px;
      }
      p {
        color: #666;
      }
      .gallery-card {
        position: relative;
        overflow: hidden;
      }

      .card-details {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 20px;
        opacity: 0;
        transition: opacity 0.3s ease;
        overflow: auto;
      }

      .gallery-card:hover .card-details {
        opacity: 1;
      }
    </style>
  </head>

  <body class="bg-gray-900 text-white">
    <nav class="navigation-bar">
      <!-- Navigation links here -->
    </nav>
    <!-- Navigation Bar -->
    <nav
      class="p-4 m-2 text-white flex justify-between items-center nav-con navigation-bar"
    >
      <div class="logo">
        <a href="/" class="text-xl font-bold">
          <span class="text-white">ForgeAI</span>
          <img src="/assets/logoforgeaiv1Alltogether.svg" />
        </a>
      </div>
      <div class="nav-links flex gap-4">
        <a
          href="/DevelopersAPI"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >DevelopersAPI</a
        >
        <a
          href="/gallery"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >Gallery</a
        >
        <a
          href="/dashboard"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >Dashboard</a
        >
        <a
          href="/plans"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >Plans</a
        >
        <a
          href="/about"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >About Us</a
        >
       <!-- Show these links if the user is NOT logged in -->
        <% if (!isLoggedIn) { %>
        <a
          href="/login"
          class="hover:bg-blue-800 px-3 py-2 rounded transition-colors duration-300"
          >Login</a
        >
        <a
          href="/register"
          class="bg-gray-800 hover:bg-gray-900 px-3 py-2 rounded transition-colors duration-300"
          >Register</a
        >
        <% } else { %>
        <!-- Show these links if the user IS logged in -->
        <a href="/userProfile">userProfile</a>
        <a href="/logout" class="logout-link">Logout</a>
        <% } %>
        <!-- ------------------------ -->
      </div>
    </nav>
    <div class="main-container">
      <!-- Search Bar Section -->
      <!-- Search Bar and Buttons Section -->
      <div class="flex flex-col items-center justify-center pt-16 pb-10 px-6">
        <h2 class="mb-4 text-3xl md:text-4xl font-bold text-center">
          Explore AI-Generated Imagery
        </h2>
        <div class="w-full max-w-4xl flex flex-wrap items-center gap-4">
          <div class="flex-grow relative">
            <input
              id="searchInput"
              type="search"
              placeholder="What are you looking for?"
              class="w-full px-6 py-4 pl-12 glass-effect rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500/50"
            />
            <svg
              class="w-8 h-8 absolute top-4 left-4 text-gray-300"
              fill="none"
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path d="M19 19l-3.5-3.5"></path>
              <circle cx="11" cy="11" r="6"></circle>
            </svg>
          </div>
          <button
            id="searchButton"
            class="glass-effect px-8 py-3 rounded-full font-semibold hover:bg-blue-500/20 transition-colors"
          >
            Search
          </button>
        </div>

        <!-- Search Type Buttons -->
        <div class="flex mt-4 gap-2">
          <button class="search-type-btn" data-search-type="basic">
            Basic
          </button>
          <button class="search-type-btn" data-search-type="user">User</button>
          <button class="search-type-btn" data-search-type="style">
            Style
          </button>
          <button class="search-type-btn" data-search-type="negativePrompt">
            Negative Prompt
          </button>
          <button class="search-type-btn" data-search-type="alphabetical">
            Alphabetical
          </button>
        </div>
      </div>

      <!-- Image Gallery Placeholder -->
      <div
        id="gallery"
        class="container mx-auto px-4 pt-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4"
      >
        <!-- Gallery items will be dynamically inserted here -->
      </div>
    </div>
    <script>
      // Define the API endpoint base URL
      const apiBaseUrl = "/api/search/";
      let currentSearchType = "basic"; // Default search type

      document.addEventListener("DOMContentLoaded", () => {
        // Load initial images on page load
        loadGalleryItems();

        // Handle search button click
        document
          .getElementById("searchButton")
          .addEventListener("click", () => {
            const searchTerm = document.getElementById("searchInput").value;
            loadGalleryItems(searchTerm);
          });

        // Handle search type button clicks
        document.querySelectorAll(".search-type-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            currentSearchType = this.getAttribute("data-search-type");
            // Update button styles to indicate active search type
            updateActiveButtonStyle(this);
            loadGalleryItems();
          });
        });
      });

      function loadGalleryItems(searchTerm = "") {
        fetch(
          `${apiBaseUrl}${currentSearchType}?term=${encodeURIComponent(
            searchTerm
          )}`
        )
          .then((response) => response.json())
          .then((data) => {
            updateGallery(data.items);
          })
          .catch((error) => console.error("Error:", error));
      }

      function updateGallery(items) {
        const galleryContainer = document.getElementById("gallery");
        galleryContainer.innerHTML = ""; // Clear existing items
        items.forEach((item) => {
          const galleryCard = createGalleryCard(item);
          galleryContainer.appendChild(galleryCard);
        });
      }

      function createGalleryCard(item) {
        // Assuming that the item object has image_url, header, and description properties
        if (!item || !item.image_url || !item.header) {
          console.error("Invalid item:", item);
          return document.createElement("div"); // Return an empty div in case of invalid data
        }

        const card = document.createElement("div");
        card.className =
          "gallery-card rounded-lg overflow-hidden shadow-lg m-4";
        card.innerHTML = `
      <img class="w-full h-auto" src="${item.image_url}" alt="${item.header}">
      <div class="card-details">
        <div class="font-bold text-xl mb-2">${item.header}</div>
        <p>${item.description || ""}</p>
      </div>
    `;
        return card;
      }

      function updateActiveButtonStyle(activeBtn) {
        document.querySelectorAll(".search-type-btn").forEach((btn) => {
          btn.classList.remove("bg-blue-500", "text-white");
          btn.classList.add("bg-gray-800", "text-gray-400");
        });
        activeBtn.classList.add("bg-blue-500", "text-white");
      }
    </script>

    <!-- <script>

      // Define the API endpoint base URL
      const apiBaseUrl = "/api/search/";
      let currentSearchType = "basic"; // Default search type

      // Load initial images on page load
      document.addEventListener("DOMContentLoaded", () => {
        loadGalleryItems();
      });

      // Handle search button click
      document.getElementById("searchButton").addEventListener("click", () => {
        const searchTerm = document.getElementById("searchInput").value;
        loadGalleryItems(searchTerm);
      });

      // Handle search type button clicks
      document.querySelectorAll(".search-type-btn").forEach((btn) => {
        btn.addEventListener("click", function () {
          currentSearchType = this.getAttribute("data-search-type");
          // Update button styles to indicate active search type
          updateActiveButtonStyle(this);
          loadGalleryItems();
        });
      });

      function loadGalleryItems(searchTerm = "") {
        fetch(
          `${apiBaseUrl}${currentSearchType}?term=${encodeURIComponent(
            searchTerm
          )}`
        )
          .then((response) => response.json())
          .then((data) => {
            console.log("Received data:", data);
            updateGallery(data.items);
          })
          .catch((error) => console.error("Error:", error));
      }

      function updateGallery(items) {
        const galleryContainer = document.getElementById("gallery");
        galleryContainer.innerHTML = ""; // Clear existing items
        items.forEach((item) => {
          const galleryCard = createGalleryCard(item);
          galleryContainer.appendChild(galleryCard);
        });
      }

      function createGalleryCard(item) {
        const card = document.createElement("div");
        card.className =
          "gallery-card rounded-lg overflow-hidden shadow-lg m-4";
        card.innerHTML = `
          <img class="w-full h-auto" src="${item.carousel_images[0]}" alt="${item.header}">
          <div class="card-details">
            <div class="font-bold text-xl mb-2">${item.header}</div>
            <p>${item.description}</p>
          </div>
        `;
        return card;
      }

      function updateActiveButtonStyle(activeBtn) {
        document.querySelectorAll(".search-type-btn").forEach((btn) => {
          btn.classList.remove("bg-blue-500", "text-white");
          btn.classList.add("bg-gray-800", "text-gray-400");
        });
        activeBtn.classList.add("bg-blue-500", "text-white");
      }
    </script> -->

    <!-- Add custom styles for search type buttons -->
    <style>
      .search-type-btn {
        padding: 8px 16px;
        background-color: #2d3748; /* Tailwind gray-800 */
        color: #a0aec0; /* Tailwind gray-400 */
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s, color 0.3s;
      }

      .search-type-btn:hover {
        background-color: #4a5568; /* Tailwind gray-700 */
      }

      .search-type-btn.bg-blue-500 {
        background-color: #4299e1; /* Tailwind blue-500 */
        color: white;
      }
    </style>
  </body>
</html>
